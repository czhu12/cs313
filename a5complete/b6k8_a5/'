/*
 * Program to print information about a FAT file system.
 */

/*
 * Main function.
 */
int main(int argc, char *argv[])
{

    if (argc < 2) {
        printf("Error. Missing file name parameter.\n");
        return 1;
    }
    
    int fd = open(argv[1], O_RDONLY);
    if(!fd) {
		fprintf(stderr, "Error: %s. \n", strerror(errno));
		return 1;
		}

		char buffer[512];
		//read(fd, buffer, 512);
    
    // Print boot disk information
    struct filesystem_info *fs = malloc(sizeof *fs);
    setFATTable(fs, buffer);

    printf("Sector size: %d\n", fs->sectorSize);
    printf("Cluster size in sectors: %d\n", fs->clusterSize);
    printf("Root directory size (nb of entries): %d\n", fs->numRootEntries);
    printf("Sectors per fat: %d\n", fs->numSecFAT);
    printf("Reserved sectors: %d\n", fs->numReservedSec);
    printf("Hidden sectors: %d\n", fs->numHiddenSec);
    printf("Fat offset in sectors: %d\n", fs->firstTableSec);
    printf("Root directory offset in sectors: %d\n", fs->firstRootSec); 
    printf("First cluster offset in sectors: %d\n\n", fs->firstClusterSec);
    
    int offset = fs->firstRootSec*fs->sectorSize;
    int entries = 0;
    unsigned char entryBuffer[32];
    
    while (entries < fs->numRootEntries) {
        lseek(fd, offset, SEEK_SET);        
        read(fd, entryBuffer, 32);
        entries++;
        offset += 32;
        
        print_root_dir(fd, fs, entryBuffer);
    }
    
    
    close(fd);
    return 0;
}
